name: Deploy

on:
  pull_request:
    branches:
    - main
    - back-dev

jobs:
  test-build-magician:
    name: Test-Build-Magician
    runs-on: ubuntu-latest
    env:
      working-directory: ./magician
      image-name: magician-server
      OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
      MAGICIAN_MONGO_HOST: 0.0.0.0
      MAGICIAN_MONGO_PASSWORD: 1234
      MAGICIAN_MONGO_PORT: 27017
      MAGICIAN_MONGO_USERNAME: root
  
    steps:
      # 체크아웃
      - name: Checkout Source
        uses: actions/checkout@v4

      # 몽고디비 설정
      - name: mongo-action
        uses: supercharge/mongodb-github-action@v1
        with:
          mongodb-db: 'chat_db'
          mongodb-username: 'root'
          mongodb-password: 1234
          
      # 파이썬 환경설정
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.8
      
      # requirements 다운
      - name: Install requirements.txt
        run: pip install -r requirements.txt
        working-directory: ${{ env.working-directory }}
      
      # 백그라운드 어플리케이션 실행
      - name: Start application
        run: python main.py &
        working-directory: ${{ env.working-directory }}

      # 테스트 실행
      - name: Test with pytest
        run: pytest
        working-directory: ${{ env.working-directory }}
      
      # docker image 빌드
      - name: Build docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.image-name }} .
        working-directory: ${{ env.working-directory }}
        
      # docker hub 로그인
      - name: Login docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      # docker hub 퍼블리시
      - name: Publish to docker hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.image-name }}

  test-build-auth:
    name: Test-Build-Auth
    runs-on: ubuntu-latest
    needs: test-build-magician
    env:
      working-directory: ./auth-service
      image-name: auth-server
      AUTH_POSTGRES_HOST: ${{ secrets.AUTH_POSTGRES_HOST }}
      AUTH_POSTGRES_PORT: ${{ secrets.AUTH_POSTGRES_PORT }}
      AUTH_POSTGRES_USER: ${{ secrets.AUTH_POSTGRES_USER }}
      AUTH_POSTGRES_PASSWORD: ${{ secrets.AUTH_POSTGRES_PASSWORD }}
      AUTH_REDIS_PORT: ${{ secrets.AUTH_REDIS_PORT }}
      AUTH_REDIS_HOST: ${{ secrets.AUTH_REDIS_HOST }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      ACCESS_EXPIRATION: ${{ secrets.ACCESS_EXPIRATION }}
      REFRESH_EXPIRATION: ${{ secrets.REFRESH_EXPIRATION }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      
    services:
      redis:
        image: redis:latest
        ports:
          - "6379:6379"
        env:
          TZ: "Asia/Seoul"
    
      postgres:
        image: postgres:latest
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: auth
          POSTGRES_USER: auth
          POSTGRES_PASSWORD: 1234
          TZ: "Asia/Seoul"
          
    steps:
    # 체크아웃
    - name: Checkout Source
      uses: actions/checkout@v4
      
    # 자바 17 환경설정
    - name: Setup Java17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'
    
    # Gradle 실행권한 부여
    - name: Grant execute permission to gradlew
      run: chmod +x ./gradlew
      working-directory: ${{ env.working-directory }}

    # Spring boot application 테스트 실행
    - name: Test with gradle
      run: ./gradlew test
      working-directory: ${{ env.working-directory }}
      
      # Spring boot application 빌드
    - name: Build with gradle
      run: ./gradlew clean build
      working-directory: ${{ env.working-directory }}
      
    # docker image 빌드
    - name: Build docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{env.image-name}} .
      working-directory: ${{ env.working-directory }}
      
    # docker hub 로그인
    - name: Login docker hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # docker hub 퍼블리시
    - name: Publish to docker hub
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{env.image-name}}
      
  test-build-composite:
    name: Test-Build-Composite
    runs-on: ubuntu-latest
    needs: test-build-auth
    env:
      working-directory: ./composite-service
      image-name: composite-server
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      TZ: "Asia/Seoul"
      COMPOSITE_REDIS_PORT: 6379
      COMPOSITE_REDIS_HOST: redis

    
    services:
      redis:
        image: redis:latest
        ports:
          - "6379:6379"
        env:
          TZ: "Asia/Seoul"

    steps:
    # 체크아웃
    - name: Checkout Source
      uses: actions/checkout@v4
      
    # 자바 17 환경설정
    - name: Setup Java17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'
    
    # Gradle 실행권한 부여
    - name: Grant execute permission to gradlew
      run: chmod +x ./gradlew
      working-directory: ${{ env.working-directory }}

    # Spring boot application 테스트 실행
    - name: Test with gradle
      run: ./gradlew test
      working-directory: ${{ env.working-directory }}
      
      # Spring boot application 빌드
    - name: Build with gradle
      run: ./gradlew clean build
      working-directory: ${{ env.working-directory }}
      
    # docker image 빌드
    - name: Build docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{env.image-name}} .
      working-directory: ${{ env.working-directory }}
      
    # docker hub 로그인
    - name: Login docker hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # docker hub 퍼블리시
    - name: Publish to docker hub
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{env.image-name}}

  test-build-debate:
    name: Test-Build-Debate
    runs-on: ubuntu-latest
    needs: test-build-composite
    env:
      working-directory: ./debate
      image-name: debate-server
      TZ: "Asia/Seoul"
      DEBATE_POSTGRES_HOST: postgres
      DEBATE_POSTGRES_PORT: 5432
      DEBATE_POSTGRES_USER: debate
      DEBATE_POSTGRES_PASSWORD: 1234
      DEBATE_REDIS_PORT: 6379
      DEBATE_REDIS_HOST: redis
      OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
    
    services:
      redis:
        image: redis:latest
        ports:
          - "6379:6379"
        env:
          TZ: "Asia/Seoul"
      
      postgres:
        image: postgres:latest
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: debate
          POSTGRES_USER: debate
          POSTGRES_PASSWORD: 1234
          TZ: "Asia/Seoul"
          
    steps:
    # 체크아웃
    - name: Checkout Source
      uses: actions/checkout@v4
      
    # 자바 17 환경설정
    - name: Setup Java17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'
    
    # Gradle 실행권한 부여
    - name: Grant execute permission to gradlew
      run: chmod +x ./gradlew
      working-directory: ${{ env.working-directory }}

    # Spring boot application 테스트 실행
    - name: Test with gradle
      run: ./gradlew test
      working-directory: ${{ env.working-directory }}
      
      # Spring boot application 빌드
    - name: Build with gradle
      run: ./gradlew clean build
      working-directory: ${{ env.working-directory }}
      
    # docker image 빌드
    - name: Build docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{env.image-name}} .
      working-directory: ${{ env.working-directory }}
      
    # docker hub 로그인
    - name: Login docker hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # docker hub 퍼블리시
    - name: Publish to docker hub
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{env.image-name}}
      
