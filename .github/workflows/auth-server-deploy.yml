name: Auth-Server Deploy

on:
  pull_request:
    branches: main
    paths: auth-service/**

# 환경변수 주입
env:
  working-directory: ./auth-service
  image-name: auth-server
  AUTH_POSTGRES_HOST: ${{ secrets.AUTH_POSTGRES_HOST }}
  AUTH_POSTGRES_PORT: ${{ secrets.AUTH_POSTGRES_PORT }}
  AUTH_POSTGRES_USER: ${{ secrets.AUTH_POSTGRES_USER }}
  AUTH_POSTGRES_PASSWORD: ${{ secrets.AUTH_POSTGRES_PASSWORD }}
  AUTH_REDIS_PORT: ${{ secrets.AUTH_REDIS_PORT }}
  AUTH_REDIS_HOST: ${{ secrets.AUTH_REDIS_HOST }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  ACCESS_EXPIRATION: ${{ secrets.ACCESS_EXPIRATION }}
  REFRESH_EXPIRATION: ${{ secrets.REFRESH_EXPIRATION }}

jobs:
  test-build-auth:
    name: Test-Build
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - "6379:6379"
        env:
          TZ: "Asia/Seoul"
    
      postgres:
        image: postgres:latest
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: auth
          POSTGRES_USER: auth
          POSTGRES_PASSWORD: 1234
          TZ: "Asia/Seoul"
          
    steps:
    # 체크아웃
    - name: Checkout Source
      uses: actions/checkout@v4
      
    # 자바 17 환경설정
    - name: Setup Java17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'
    
    # Gradle 실행권한 부여
    - name: Grant execute permission to gradlew
      run: chmod +x ./gradlew
      working-directory: ${{ env.working-directory }}

    # Spring boot application 테스트 실행
    - name: Test with gradle
      run: ./gradlew test
      working-directory: ${{ env.working-directory }}
      
      # Spring boot application 빌드
    - name: Build with gradle
      run: ./gradlew clean build
      working-directory: ${{ env.working-directory }}
      
    # docker image 빌드
    - name: Build docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{env.image-name}} .
      working-directory: ${{ env.working-directory }}
      
    # docker hub 로그인
    - name: Login docker hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # docker hub 퍼블리시
    - name: Publish to docker hub
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{env.image-name}}
    

    
