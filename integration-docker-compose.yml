version: '3'

services:

  # common
  redis:
    container_name: redis
    hostname: redis
    image: redis:latest
    ports:
      - "6379:6379"
    restart: always
    environment:
      TZ: "Asia/Seoul"
    networks:
      - auth
      - composite
      - debate
      - magician

  # magician
  mongo-magician:
    image: mongo
    container_name: mongo-magician
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=1234
      - MONGO_INITDB_DATABASE=chat_db
    networks:
      - magician

  application_magician:
    build: magician/.
    depends_on:
      - mongo-magician
    restart: always
    container_name: magician
    ports:
      - "8000:8000"
    environment:
      OPENAI_KEY: ""
      MAGICIAN_MONGO_USERNAME: root
      MAGICIAN_MONGO_PASSWORD: 1234
      MAGICIAN_MONGO_PORT: 27017
      MAGICIAN_MONGO_HOST: mongo-magician
      MAGICIAN_REDIS_PORT: 6379
      MAGICIAN_REDIS_HOST: redis
    networks:
      - magician
      - composite

 # auth
  postgres-auth:
    container_name: postgres-auth
    hostname: postgres-auth
    image: postgres:latest
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_DB: auth
      POSTGRES_USER: auth
      POSTGRES_PASSWORD: 1234
      TZ: "Asia/Seoul"
    volumes:
      - ./auth-service/postgres-data:/var/lib/postgresql/data
    networks:
      - auth

  application-auth:
    container_name: auth-service
    build: auth-service/.
    ports:
      - "8080:8080"
    restart: always
    environment:
      TZ: "Asia/Seoul"
      AUTH_POSTGRES_HOST: postgres-auth
      AUTH_POSTGRES_PORT: 5432
      AUTH_POSTGRES_USER: auth
      AUTH_POSTGRES_PASSWORD: 1234
      AUTH_REDIS_PORT: 6379
      AUTH_REDIS_HOST: redis
      JWT_SECRET: "test_JWT_secret"
      ACCESS_EXPIRATION: 3600000
      REFRESH_EXPIRATION: 86400000
      GOOGLE_CLIENT_ID: ""
      GOOGLE_CLIENT_SECRET: ""
      AWS_ACCESS_KEY: ""
      AWS_SECRET_KEY: ""
      AWS_S3_BUCKET: ""
    depends_on:
      - redis
      - postgres-auth
    networks:
      - auth
      - composite

  # composite
  application-composite:
    container_name: composite-service
    build: composite-service/.
    ports:
      - "8081:8081"
    restart: always
    environment:
      TZ: "Asia/Seoul"
      JWT_SECRET: "test_JWT_secret"
      COMPOSITE_REDIS_PORT: 6379
      COMPOSITE_REDIS_HOST: redis

    depends_on:
      - redis
    networks:
      - composite

  # debate
  postgres-debate:
    container_name: postgres-debate
    hostname: postgres-debate
    image: postgres:latest
    ports:
      - "5433:5433"
    restart: always
    environment:
      POSTGRES_DB: debate
      POSTGRES_USER: debate
      POSTGRES_PASSWORD: 1234
      TZ: "Asia/Seoul"
    volumes:
      - ./debate/postgres-data:/var/lib/postgresql/data
    networks:
      - debate

  application-debate:
    container_name: debate-service
    build: debate/.
    ports:
      - "8082:8082"
    restart: always
    environment:
      TZ: "Asia/Seoul"
      DEBATE_POSTGRES_HOST: postgres-debate
      DEBATE_POSTGRES_PORT: 5433
      DEBATE_POSTGRES_USER: debate
      DEBATE_POSTGRES_PASSWORD: 1234
      DEBATE_REDIS_PORT: 6379
      DEBATE_REDIS_HOST: redis
      OPENAI_KEY: ""
    depends_on:
      - postgres-debate
      - redis
    networks:
      - debate
      - composite

networks:
  magician:
    driver: bridge
  auth:
    driver: bridge
  composite:
    driver: bridge
  debate:
    driver: bridge



